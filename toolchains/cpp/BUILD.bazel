# https://bazel.build/tutorials/ccp-toolchain-config
package(default_visibility = ["//visibility:public"])

load(":cc_toolchain_config.bzl", "y_clang_toolchain_config")

# TODO: remove later
# https://bazel.build/reference/be/c-cpp#cc_toolchain_suite.toolchains
cc_toolchain_suite(
    name = "cpp_toolchainsuite",
    toolchains = {
        "x86_64|clang": ":_clang_toolchain_a",
        "x64|clang_x": ":_clang_toolchain_b",
        # `bazel build --crosstool_top=//toolchain:cpp_toolchainsuite --cpu=k8 --compiler=clang`
        # Specify `--cpu=k8 --compiler=clang` at the same time.
    },
)

filegroup(name = "empty")

y_clang_toolchain_config(name = "_clang_config_a")

y_clang_toolchain_config(name = "_clang_config_b")

# `cc_toolchain` is a native C/C++ rules.
# https://bazel.build/reference/be/c-cpp
cc_toolchain(
    name = "_clang_toolchain_a",
    all_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
    toolchain_config = ":_clang_config_a",
    toolchain_identifier = "k8-clang-toolchain",
)

toolchain(
    name = "clang_toolchain_a",
    exec_compatible_with = [
        # exec_compatible_with is the execution of the building.
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    target_compatible_with = [
        # target specifies the platform where the outputs will be run.
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    toolchain = ":_clang_toolchain_a",
    toolchain_type = "@rules_cc//cc:toolchain_type",
)

cc_toolchain(
    name = "_clang_toolchain_b",
    all_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
    toolchain_config = ":_clang_config_b",
    toolchain_identifier = "another-k8-clang-toolchain",
)

toolchain(
    name = "clang_toolchain_b",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    target_compatible_with = [
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
        "//toolchains/cpp/platforms:clang_v2",
    ],
    toolchain = ":_clang_toolchain_b",
    toolchain_type = "@rules_cc//cc:toolchain_type",
)
